Index: src/squirrel/include/squirrel.h
===================================================================
--- src/squirrel/include/squirrel.h	(revision 5823)
+++ src/squirrel/include/squirrel.h	(working copy)
@@ -42,16 +42,19 @@
 #ifdef _SQ64
 #ifdef _MSC_VER
 typedef __int64 SQInteger;
+#define _SC_INT_FMT "%Id"
 typedef unsigned __int64 SQUnsignedInteger;
 typedef unsigned __int64 SQHash; /*should be the same size of a pointer*/
 #else
 typedef long SQInteger;
+#define _SC_INT_FMT "%ld"
 typedef unsigned long SQUnsignedInteger;
 typedef unsigned long SQHash; /*should be the same size of a pointer*/
 #endif
 typedef int SQInt32; 
 #else 
 typedef int SQInteger;
+#define _SC_INT_FMT "%d"
 typedef int SQInt32; /*must be 32 bits(also on 64bits processors)*/
 typedef unsigned int SQUnsignedInteger;
 typedef unsigned int SQHash; /*should be the same size of a pointer*/
Index: src/squirrel/sqstdlib/sqstdstream.h
===================================================================
--- src/squirrel/sqstdlib/sqstdstream.h	(revision 5823)
+++ src/squirrel/sqstdlib/sqstdstream.h	(working copy)
@@ -14,5 +14,5 @@
 SQInteger _stream_flush(HSQUIRRELVM v);
 
 #define _DECL_STREAM_FUNC(name,nparams,typecheck) {_SC(#name),_stream_##name,nparams,typecheck}
-SQRESULT declare_stream(HSQUIRRELVM v,SQChar* name,SQUserPointer typetag,SQChar* reg_name,SQRegFunction *methods,SQRegFunction *globals);
+SQRESULT declare_stream(HSQUIRRELVM v,const SQChar* name,SQUserPointer typetag,const SQChar* reg_name,SQRegFunction *methods,SQRegFunction *globals);
 #endif /*_SQSTD_STREAM_H_*/
Index: src/squirrel/sqstdlib/sqstdstream.cpp
===================================================================
--- src/squirrel/sqstdlib/sqstdstream.cpp	(revision 5823)
+++ src/squirrel/sqstdlib/sqstdstream.cpp	(working copy)
@@ -277,7 +277,7 @@
 	sq_pop(v,1);
 }
 
-SQRESULT declare_stream(HSQUIRRELVM v,SQChar* name,SQUserPointer typetag,SQChar* reg_name,SQRegFunction *methods,SQRegFunction *globals)
+SQRESULT declare_stream(HSQUIRRELVM v,const SQChar* name,SQUserPointer typetag,const SQChar* reg_name,SQRegFunction *methods,SQRegFunction *globals)
 {
 	if(sq_gettype(v,-1) != OT_TABLE)
 		return sq_throwerror(v,_SC("table expected"));
Index: src/squirrel/sqstdlib/sqstdrex.cpp
===================================================================
--- src/squirrel/sqstdlib/sqstdrex.cpp	(revision 5823)
+++ src/squirrel/sqstdlib/sqstdrex.cpp	(working copy)
@@ -483,7 +483,7 @@
 			return cur;
 	}				 
 	case OP_WB:
-		if(str == exp->_bol && !isspace(*str)
+		if((str == exp->_bol && !isspace(*str))
 		 || (str == exp->_eol && !isspace(*(str-1)))
 		 || (!isspace(*str) && isspace(*(str+1)))
 		 || (isspace(*str) && !isspace(*(str+1))) ) {
Index: src/squirrel/squirrel/sqfuncstate.cpp
===================================================================
--- src/squirrel/squirrel/sqfuncstate.cpp	(revision 5823)
+++ src/squirrel/squirrel/sqfuncstate.cpp	(working copy)
@@ -79,7 +79,7 @@
 	switch(type(o)){
 		case OT_STRING:	scprintf(_SC("\"%s\""),_stringval(o));break;
 		case OT_FLOAT: scprintf(_SC("{%f}"),_float(o));break;
-		case OT_INTEGER: scprintf(_SC("{%d}"),_integer(o));break;
+		case OT_INTEGER: scprintf(_SC("{" _SC_INT_FMT "}"),_integer(o));break;
 		case OT_BOOL: scprintf(_SC("%s"),_integer(o)?_SC("true"):_SC("false"));break;
 		default: scprintf(_SC("(%s %p)"),GetTypeName(o),_rawval(o));break; break; //shut up compiler
 	}
Index: src/squirrel/squirrel/sqapi.cpp
===================================================================
--- src/squirrel/squirrel/sqapi.cpp	(revision 5823)
+++ src/squirrel/squirrel/sqapi.cpp	(working copy)
@@ -790,7 +790,7 @@
 		_table(*self)->Remove(key);
 	}
 	if(pushval != 0)
-		if(pushval)	v->GetUp(-1) = t;
+		v->GetUp(-1) = t;
 	else
 		v->Pop(1);
 	return SQ_OK;
Index: src/squirrel/squirrel/sqcompiler.cpp
===================================================================
--- src/squirrel/squirrel/sqcompiler.cpp	(revision 5823)
+++ src/squirrel/squirrel/sqcompiler.cpp	(working copy)
@@ -826,7 +826,7 @@
 			SQInteger val = _fs->PopTarget();
 			SQInteger key = _fs->PopTarget();
 			SQInteger attrs = hasattrs ? _fs->PopTarget():-1;
-			assert(hasattrs && attrs == key-1 || !hasattrs);
+			assert((hasattrs && attrs == key-1) || !hasattrs);
 			unsigned char flags = (hasattrs?NEW_SLOT_ATTRIBUTES_FLAG:0)|(isstatic?NEW_SLOT_STATIC_FLAG:0);
 			SQInteger table = _fs->TopTarget(); //<<BECAUSE OF THIS NO COMMON EMIT FUNC IS POSSIBLE
 			_fs->AddInstruction(_OP_NEWSLOTA, flags, table, key, val);
Index: src/squirrel/squirrel/sqvm.cpp
===================================================================
--- src/squirrel/squirrel/sqvm.cpp	(revision 5823)
+++ src/squirrel/squirrel/sqvm.cpp	(working copy)
@@ -231,7 +231,7 @@
 		scsprintf(_sp(rsl(NUMBER_MAX_CHAR+1)),_SC("%g"),_float(o));
 		break;
 	case OT_INTEGER:
-		scsprintf(_sp(rsl(NUMBER_MAX_CHAR+1)),_SC("%d"),_integer(o));
+		scsprintf(_sp(rsl(NUMBER_MAX_CHAR+1)),_SC(_SC_INT_FMT),_integer(o));
 		break;
 	case OT_BOOL:
 		scsprintf(_sp(rsl(6)),_integer(o)?_SC("true"):_SC("false"));
@@ -628,7 +628,7 @@
 
 bool SQVM::IsFalse(SQObjectPtr &o)
 {
-	if((type(o) & SQOBJECT_CANBEFALSE) && ( (type(o) == OT_FLOAT) && (_float(o) == SQFloat(0.0)) )
+	if(((type(o) & SQOBJECT_CANBEFALSE) && ( (type(o) == OT_FLOAT) && (_float(o) == SQFloat(0.0)) ))
 		|| (_integer(o) == 0) ) { //OT_NULL|OT_INTEGER|OT_BOOL
 		return true;
 	}
Index: src/squirrel/squirrel/sqdebug.cpp
===================================================================
--- src/squirrel/squirrel/sqdebug.cpp	(revision 5823)
+++ src/squirrel/squirrel/sqdebug.cpp	(working copy)
@@ -57,7 +57,7 @@
 	switch(type(o)) {
 	case OT_STRING: return _string(o);
 	case OT_INTEGER:
-		scsprintf(_sp(rsl(NUMBER_MAX_CHAR+1)), _SC("%d"), _integer(o));
+		scsprintf(_sp(rsl(NUMBER_MAX_CHAR+1)), _SC(_SC_INT_FMT), _integer(o));
 		return SQString::Create(_ss(this), _spval);
 		break;
 	case OT_FLOAT:
